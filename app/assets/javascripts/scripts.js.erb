"use strict";

$(document).ready(function() {
// Various HTML elements
  var displayData = $("ul#displayData");
  var buttonZS = $("button#zip-search");
  var buzzbitesLogo = $(".brand-logo");
  var formZipCode = $('input#zip-search');
  var locationTitle = $('h5#location-title');

// Foursquare query keys (and values)
  var section = "section=trending";
  var opennow = "openNow=1";
  //var datatype = "&m=foursquare";
  // var limit = "limit=5";
  // var offset = "offset=", offsetNum = 0;
  var query = "query=restaurants";
  var version = "v=20160821";

// Variables where the data will be stored/handled
  var foursquare_data_venueName = "", foursquare_data_venueType = "", foursquare_data_venueCheckins = 0;
  var foursquare_data_venueAddress = [], foursquare_data_venuePhone = "", foursquare_data_venueLatLong = [];
  var zipCode = "";
  var restSearch = /Restaurant/; // RegEx pattern to find ONLY restaurants (and not McD's n stuf)
  var myLatitude = "", myLongitude = "", lat_lot = "";

//API keys
  var mapsApi = "<%= ENV['googlemaps_api_key'] %>";
  var client_id = "<%= ENV['foursquare_client_id'] %>";
  var client_secret = "<%= ENV['foursquare_client_secret'] %>";
  var igAccessToken = "<%= ENV['instagram_access_token'] %>";
  var igClientId = "<%= ENV['instagram_client_id'] %>";
  var igClientSecret = "<%= ENV['instagram_client_secret'] %>";
  var twitterConsumerKey = "<%= ENV['twitter_consumer_key'] %>";
  var twitterConsumerSecret = "<%= ENV['twitter_consumer_secret'] %>";
  var twitterAccessToken = "<%= ENV['twitter_access_token'] %>";
  var twitterAccessTokenSecret = "<%= ENV['twitter_access_token_secret'] %>";


// Probably used by Materialize for some sort of animation on the page
  $("#scroll-top").click(function() {
    $('html, body').animate({
        scrollTop: $(".navbar-wrapper").offset().top
    }, 300);
  });


// Used by Materialize for the accordion animation
  $('.collapsible').collapsible({
    accordion : false // A setting that changes the collapsible behavior to expandable instead of the default accordion style
  });


  // Used by Materialize for the parallax animation
  $('.parallax').parallax();


  // This function finds the current location loaded from browser data

  var getLocation = function() {
      if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(showPosition);
      } else { console.log('Geolocation is not supported or allowed for this Browser'); }
  }();//getLocation


  // This function finds a list of nearby checked-in restaurants FourSquare's API based on longitude and latitude
  var getFoursquare = function () {
    $.ajax({                              // Initial call to Foursquare
      method: "GET",
      url: "https://api.foursquare.com/v2/venues/explore?client_id="+client_id+"&client_secret="+client_secret+"&"+version+
            "&"+section+"&"+opennow+"&"+query+"&"+lat_lot,
      success: function(data){            // Foursquare data received! Let's store it
        var results = data["response"]["groups"][0]["items"];
        var y = results.length - 1,
            restaurantsSorted = [], // Used for loops/storage
            restaurantList = [];


  // *Start of loop one* Here every Foursquare result is looped through to grab only what we want
        for (var x = 0; x < y; x++) {
          if (results[x]["venue"]["name"].length > 0 && results[x]["venue"]["categories"][0]["name"].match(restSearch)) {
            foursquare_data_venueName =     results[x]["venue"]["name"];
            foursquare_data_venueType =     results[x]["venue"]["categories"][0]["name"];
            foursquare_data_venueCheckins = results[x]["venue"]["stats"]["checkinsCount"];
            foursquare_data_venueAddress =[ results[x]["venue"]["location"]["formattedAddress"][0],
                                            results[x]["venue"]["location"]["formattedAddress"][1] ];
            foursquare_data_venuePhone =    results[x]["venue"]["contact"]["formattedPhone"];
            foursquare_data_venueLatLong =[ results[x]["venue"]["location"]["lat"], results[x]["venue"]["location"]["lng"] ];

             restaurantsSorted[x] = { "name" : foursquare_data_venueName, "checkin" : foursquare_data_venueCheckins,
                                      "address" : foursquare_data_venueAddress, "phone" : foursquare_data_venuePhone,
                                      "latlong" : foursquare_data_venueLatLong };
          }
  // *Still in loop one* If it's a restaurant, store its info in the array. Ignore otherwise.
          //if (foursquare_data_venueType.match(restSearch) && foursquare_data_venueName === true) {
            console.log(foursquare_data_venueName);

          //}
        }
  // *End of loop one* Sort the restaurants objects by check in amount
        restaurantsSorted.sort(function(a,b){return b.checkin - a.checkin});

//         for (var x = 0; x < y; x++) {
//           if(typeof restaurantsSorted[x] === "undefined"){
// console.log("fack")// fack. why does it still get to the else?
//           } else {
//             var restaurantHashtag = restaurantsSorted[x]["name"].replace(/\W/g,'');
//             // debugger
//             restaurantList.push(restaurantHashtag);
//             console.log(restaurantList);
//           }
//         };

        // debugger

  // *Start of loop two* Appending the restaurants and its info to the page's accordion
        for (var x = 0; x < y; x++) {
          displayData.append("<li><div class='collapsible-header'>"+restaurantsSorted[x]["name"] +
            "</div><div class='collapsible-body'>Address: "+restaurantsSorted[x]["address"][0] + "<br />" +
            restaurantsSorted[x]["address"][1]+"<br />" + "Phone: " + restaurantsSorted[x]["phone"]+
            "</div></li>");
          //array.each x=0 xx++
           // append <img src=[x]>
        }
  // *End of loop two*
      }
    });
  }// getFoursquare





// Default list of local trending restaurants (using the browser's geolocation)
  function showPosition(position) {
    displayData.empty();                        // Clears the restaurants list
    myLatitude = position.coords.latitude;      // Latitude and longitude variables
    myLongitude = position.coords.longitude;

    lat_lot = "ll="+myLatitude+","+myLongitude; // Foursquare query use

    getFoursquare();
  };


// Zip code given! List of trending restaurants from zipcode submitted by user
  buttonZS.click(function() {
    displayData.empty();                        // Clears the restaurants list
    zipCode = formZipCode.val();                // The user's zip code
    locationTitle.empty();
    locationTitle.append("<h5 id='location-title'><em><b>Restaurants around "+zipCode+" with Buzz</b></em></h5>");

    if (zipCode != "") {                        // If the above's not empty
      $.ajax({                                  // Initial call to Google Maps
        method: "GET",
        url: "https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:"+zipCode+"&key="+mapsApi,
        success: function(data){
          myLongitude = data['results'][0]['geometry']['location']['lng'];
          myLatitude = data['results'][0]['geometry']['location']['lat'];
          lat_lot = "ll="+myLatitude+","+myLongitude; // Store the lat and lon info for Foursquare's url build

          getFoursquare();
        }
      });
    }
  });

//trying to fix bug. clicking on main logo does not re-render page
  buzzbitesLogo.click(function(){
    navigator.geolocation.getCurrentPosition(showPosition);
  })

});

